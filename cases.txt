т.к. для smoke сьюта важно точное назначение сервиса, предположим:
* что абстрактный сервис reqres.in предназначен, в первую очередь, для получения данных о пользователях
* при необходимости, пользователей можно создавать и апдейтить информацию о них
* что авторизация для получения таких данных не обязательна

В таком случае, smoke набор будет выгдятеь как (кейсы расположены по мере убывания приоритетности выполнения):

Получение данных пользователя:
1 Отправить GET запрос по адресу /api/users/*идентификатор пользователя*

Ожидаемый результат:
Ответ вида
'{"data":{"id":*идентификатор пользователя*,"email":"","first_name":"","last_name":"","avatar":""}}'
Http код = 200
Время ответа от сервиса не превышает 500ms

Тестовые данные: id = 2
-------------------------------------

2 Получение данных нескольких пользователей"
2 Отправить GET запрос по адресу /api/users/

Ожидаемый результат:
Ответ вида
{"page":1,"per_page":6,"total":12,"total_pages":2,"data":[]}
Количество пользователей на странице соответствует заявленным
Http код = 200
Время ответа от сервиса не превышает 500ms
Первая аватара пользователя из списка доступна (переход по url вида https://s3.amazonaws.com/uifaces/faces/twitter/araa3185/128.jpg, проверка кода ответа)

-------------------------------------

3 Создание пользователя
3.1 Отправить POST запрос по адресу /api/users/, тело вида {"name": "morpheus","job": "leader"}
Ожидаемый результат:
Ответ вида
{"name": "morpheus","job": "leader","id": "963","createdAt": "2019-10-02T14:10:28.640Z"}
Http код = 201
3.2 Отправить запрос на получение данных пользователя согласно кейса.1, используя полученный идентификатор
Ожидаемый результат:
Пользователь найден, данные соответствуют данным из п.1
Http код = 200

-------------------------------------
-------------------------------------

Ограничения, проблемы в проекте:
* Не оптимальное разбитие по модулям => неочевидная реализация
* В тестах присутсвуют низкоуровненвые языковые конструкции
* Изолировать тестовые данные, assert-тить json-ы по схемам (не реализовано)
* Отлов ошибок во многих местах, неочевидно

запуск:
/piano/
$pip install .
$pytest